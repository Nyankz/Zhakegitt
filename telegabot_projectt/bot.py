import logging
import os
import google.generativeai as genai
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from dotenv import load_dotenv

# .env —Ñ–∞–π–ª—ã–Ω –∂“Ø–∫—Ç–µ—É
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-pro")

# /start –∫–æ–º–∞–Ω–¥–∞—Å—ã
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["/chat", "/gdz", "/quiz", "/learn", "/referal"]
    keyboard.add(*buttons)
    await message.answer("–°”ô–ª–µ–º! –ë–æ—Ç“õ–∞ “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑.\n–¢”©–º–µ–Ω–¥–µ–≥—ñ –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω–∞ –∞–ª–∞—Å—ã–∑:", reply_markup=keyboard)

# /help –∫–æ–º–∞–Ω–¥–∞—Å—ã
@dp.message_handler(commands=["help"])
async def help_cmd(message: types.Message):
    help_text = (
        "/chat - –ï—Ä–∫—ñ–Ω —á–∞—Ç (GPT –Ω–µ–º–µ—Å–µ Gemini)\n"
        "/gdz - “Æ–π —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä—ã–Ω—ã“£ —à–µ—à—ñ–º–¥–µ—Ä—ñ\n"
        "/quiz - –ú“±“ì–∞–ª—ñ–º–¥–µ—Ä–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞\n"
        "/learn - –ö—É—Ä—Å—Ç–∞—Ä (–∞“õ—ã–ª—ã/—Ç–µ–≥—ñ–Ω)\n"
        "/referal - –†–µ—Ñ–µ—Ä–∞–ª –∂“Ø–π–µ—Å—ñ (–±–æ–Ω—É—Å –∞–ª—É)"
    )
    await message.answer(help_text)

# /chat - –ï—Ä–∫—ñ–Ω —á–∞—Ç (Gemini)
@dp.message_handler(commands=["chat"])
async def chat_start(message: types.Message):
    await message.answer("–°”ô–ª–µ–º! –ú–∞“ì–∞–Ω —Å“±—Ä–∞“ì—ã“£—ã–∑–¥—ã “õ–æ–π—ã“£—ã–∑. üòä")

# –ë–∞—Ä–ª—ã“õ –±–∞—Å“õ–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä–¥—ã ”©“£–¥–µ—É (—á–∞—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É)
@dp.message_handler()
async def chat_gemini(message: types.Message):
    try:
        response = model.generate_content(message.text)
        answer = response.candidates[0].content if response.candidates else "–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –∂–∞—É–∞–ø —Ç–∞–±—ã–ª–º–∞–¥—ã."
        await message.answer(answer)
    except Exception as e:
        await message.answer(f"–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –∂–∞—É–∞–ø –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –∫–µ—Ç—Ç—ñ. üòû\n“ö–∞—Ç–µ: {str(e)}")

# /gdz –∫–æ–º–∞–Ω–¥–∞—Å—ã
@dp.message_handler(commands=["gdz"])
async def gdz_cmd(message: types.Message):
    await message.answer("–ì–î–ó –∂“Ø–π–µ—Å—ñ –∂–∞“õ—ã–Ω–¥–∞ —ñ—Å–∫–µ “õ–æ—Å—ã–ª–∞–¥—ã!")

# /quiz –∫–æ–º–∞–Ω–¥–∞—Å—ã
@dp.message_handler(commands=["quiz"])
async def quiz_cmd(message: types.Message):
    await message.answer("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∂“Ø–π–µ—Å—ñ ”ô–∑—ñ—Ä–ª–µ–Ω—É “Ø—Å—Ç—ñ–Ω–¥–µ!")

# /learn –∫–æ–º–∞–Ω–¥–∞—Å—ã
@dp.message_handler(commands=["learn"])
async def learn_cmd(message: types.Message):
    await message.answer("–ö—É—Ä—Å—Ç–∞—Ä –∂“Ø–π–µ—Å—ñ –∂–∞“õ—ã–Ω–¥–∞ —ñ—Å–∫–µ “õ–æ—Å—ã–ª–∞–¥—ã!")

# /referal –∫–æ–º–∞–Ω–¥–∞—Å—ã
@dp.message_handler(commands=["referal"])
async def referal_cmd(message: types.Message):
    await message.answer("–†–µ—Ñ–µ—Ä–∞–ª –∂“Ø–π–µ—Å—ñ ”ô–∑—ñ—Ä–ª–µ–Ω—É “Ø—Å—Ç—ñ–Ω–¥–µ!")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
